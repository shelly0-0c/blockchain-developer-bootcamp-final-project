{"version":3,"sources":["components/Notification.js","components/ConnectWallet.js","components/NoWalletDetected.js","components/SurveyPopUp.js","components/SurveyCreationPopUp.js","components/SurveyRefundPopUp.js","pages/SurveyPage.js","components/LoadingScreen.js","Dapp.js","index.js"],"names":["Notification","isError","messageObj","show","onHide","ToastContainer","position","Toast","onClose","bg","delay","autohide","Header","className","Body","message","ConnectWallet","connectWallet","type","onClick","NoWalletDetected","href","target","rel","SurveyPopUp","address","survey","onShow","onSubmit","useState","item_1","setItem1","item_2","setItem2","item_3","setItem3","Modal","size","centered","closeButton","Title","id","title","content","Form","Group","controlId","Label","question","Control","onChange","event","value","required","suggestions","Text","Footer","Button","variant","formatted","allValues_arr","survey_content","forEach","index","data_obj","answer","push","formatAnswer","survey_response","survey_taker","responses","SurveyCreationPopUp","myRefs","useRef","length","description","survey_owner","closing_date","total_rewards_eth","reward_eth","metadata","setMetadata","suggestion","question_1","setQuestion1","question_2","setQuestion2","question_3","setQuestion3","handleSubmit","uuid","allQuestions","handleKeyEnter","e","targetElem","key","focus","as","Row","column","sm","style","color","Col","prevState","onKeyPress","current","ref","el","FloatingLabel","label","placeholder","SurveyRefundPopUp","escrowAddress","selectedAddress","muted","SurveyPage","surveys","network","balance","onCreateSurvey","onTakeSurvey","onRefund","modalShow","data","selectedValues","setSelectedValues","newSurvey","setNewSurvey","refundValues","setRefundValues","surveyList","setSurveyList","events","a","useEffect","Container","console","log","Stack","gap","Card","undefined","name","direction","disabled","map","Subtitle","LoadingScreen","isBtnDisabled","hide","setHide","Spinner","animation","role","ETHEREUM_NETWORK","Dapp","props","initialState","loading","status","isWalletConnected","error","showError","showInfo","tx","info","ipfs","state","this","_provider","ethers","providers","Web3Provider","window","ethereum","_surveyContract","Contract","process","SurveyProcessorArtifact","abi","getSigner","_rewardEscrowContract","RewardEscrowArtifact","setState","SAMPLE_SURVEYS","_NFTclient","NFTStorage","token","_initializeEthers","_initializeNFTStorageClient","prevProps","on","accounts","_getAccountBalance","then","newBalance","utils","formatEther","chainId","_getMetamaskAccount","addr","once","surveyCreator","surveyId","respondent","totalResponses","parseInt","recipient","surveyOwner","_connectWallet","_registerSurvey","_takeSurvey","_refundCredits","_closeTxError","_closeNetworkError","_closeInfo","_loadingCloseHandler","send","account","getBalance","_getNetworkConnected","overrides","parseEther","registerSurvey","parseUnits","transaction","wait","receipt","latestBalance","surveyResponse","_store","metadataUrl","answerSurvey","refundOnSurveyClosed","filter","each","storeBlob","Blob","JSON","stringify","fileCid","fileUrl","obj","file_url","metadataCid","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af592bf3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport Toast from \"react-bootstrap/Toast\";\nimport ToastContainer from \"react-bootstrap/ToastContainer\";\n\nexport function Notification({ isError = false, messageObj, show, onHide }) {\n  function handleClose() {\n    onHide(true);\n  }\n\n  return (\n    <ToastContainer position=\"top-end\">\n      <Toast\n        onClose={() => handleClose()}\n        show={show}\n        bg={isError ? \"danger\" : \"light\"}\n        delay={8000}\n        autohide\n      >\n        <Toast.Header>\n          {isError && <strong className=\"me-auto\">Transaction Error</strong>}\n          {!isError && <strong className=\"me-auto\">Transaction</strong>}\n        </Toast.Header>\n        {isError && (\n          <Toast.Body className={\"text-white\"}>{messageObj.message}</Toast.Body>\n        )}\n        {!isError && (\n          <Toast.Body className={\"text-black\"}>{messageObj}</Toast.Body>\n        )}\n      </Toast>\n    </ToastContainer>\n  );\n}\n","import React from \"react\";\n\nexport function ConnectWallet({ connectWallet }) {\n  return (\n    <div className=\"row justify-content-md-center\">\n      <div className=\"col-6 p-4 text-center\">\n        <p>Please connect to your wallet.</p>\n        <button\n          className=\"btn btn-primary\"\n          type=\"button\"\n          onClick={connectWallet}\n        >\n          Connect Metamask\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <p>\n        No Ethereum wallet was detected. <br />\n        Please install{\" \"}\n        <a href=\"http://metamask.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n          MetaMask\n        </a>\n        .\n      </p>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nexport function SurveyPopUp({ address, survey, onShow, onHide, onSubmit }) {\n  const [item_1, setItem1] = useState(\"\");\n  const [item_2, setItem2] = useState(\"\");\n  const [item_3, setItem3] = useState(\"\");\n\n  function handleSubmit() {\n    const allValues = [item_1, item_2, item_3];\n    const formatted = formatAnswer(allValues);\n\n    const survey_response = {\n      id: survey.id,\n      title: survey.title,\n      survey_taker: address,\n      responses: formatted,\n    };\n\n    onHide(true);\n    onSubmit(survey_response);\n  }\n\n  function formatAnswer(allValues_arr) {\n    const survey_content = [];\n\n    survey.content.forEach((value, index) => {\n      const data_obj = {\n        id: index + 1,\n        question: value.question,\n        answer: allValues_arr[index],\n      };\n      survey_content.push(data_obj);\n    });\n    return survey_content;\n  }\n\n  return (\n    <Modal\n      show={onShow}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {survey.title}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {survey.content && (\n          <Form>\n            <Form.Group\n              className=\"mb-3\"\n              controlId={survey.content[0].id}\n              key=\"1\"\n            >\n              <Form.Label>{survey.content[0].question}</Form.Label>\n              <Form.Control\n                type=\"text\"\n                onChange={(event) => {\n                  setItem1(event.target.value);\n                }}\n                required\n              />\n              {survey.content[0].suggestions && (\n                <Form.Text className=\"text-muted\">\n                  Suggestions: {survey.content[0].suggestions}\n                </Form.Text>\n              )}\n            </Form.Group>\n            <Form.Group\n              className=\"mb-3\"\n              controlId={survey.content[1].id}\n              key=\"2\"\n            >\n              <Form.Label>{survey.content[1].question}</Form.Label>\n              <Form.Control\n                type=\"text\"\n                onChange={(event) => {\n                  setItem2(event.target.value);\n                }}\n                required\n              />\n              {survey.content[1].suggestions && (\n                <Form.Text className=\"text-muted\">\n                  Suggestions: {survey.content[1].suggestions}\n                </Form.Text>\n              )}\n            </Form.Group>\n            <Form.Group\n              className=\"mb-3\"\n              controlId={survey.content[2].id}\n              key=\"3\"\n            >\n              <Form.Label>{survey.content[2].question}</Form.Label>\n              <Form.Control\n                type=\"text\"\n                onChange={(event) => {\n                  setItem3(event.target.value);\n                }}\n                required\n              />\n              {survey.content[2].suggestions && (\n                <Form.Text className=\"text-muted\">\n                  Suggestions: {survey.content[2].suggestions}\n                </Form.Text>\n              )}\n            </Form.Group>\n          </Form>\n        )}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\n          Upload & Submit\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import React, { useState, useRef } from \"react\";\n\nimport uuid from \"react-uuid\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport FloatingLabel from \"react-bootstrap/esm/FloatingLabel\";\n\nexport function SurveyCreationPopUp({ address, onShow, onHide, onSubmit }) {\n  const myRefs = useRef([]);\n\n  const [metadata, setMetadata] = useState({\n    title: \"\",\n    length: \"\",\n    description: \"\",\n    survey_owner: address,\n    closing_date: \"\",\n    total_rewards_eth: \"\",\n    reward_eth: \"\",\n  });\n\n  const [question_1, setQuestion1] = useState({\n    question: \"\",\n    suggestion: \"\",\n  });\n  const [question_2, setQuestion2] = useState({\n    question: \"\",\n    suggestion: \"\",\n  });\n  const [question_3, setQuestion3] = useState({\n    question: \"\",\n    suggestion: \"\",\n  });\n\n  function handleSubmit() {\n    const formatted = formatAnswer();\n    onHide(true);\n    onSubmit(formatted);\n  }\n\n  function formatAnswer() {\n    const id = uuid();\n    const allQuestions = [question_1, question_2, question_3];\n    const data_obj = {\n      ...metadata,\n      id: id,\n      content: allQuestions,\n    };\n    return data_obj;\n  }\n\n  function handleKeyEnter(e, targetElem) {\n    if (e.key === \"Enter\" && targetElem) {\n      targetElem.focus();\n    }\n  }\n\n  return (\n    <Modal\n      show={onShow}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">New Survey</Modal.Title>\n      </Modal.Header>\n      <Form>\n        <Modal.Body>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formSurveyTitle\">\n            <Form.Label column sm={2}>\n              Survey Title\n              <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                required\n                onChange={(event) => {\n                  setMetadata((prevState) => {\n                    return { ...prevState, title: event.target.value };\n                  });\n                }}\n                onKeyPress={(e) => {\n                  handleKeyEnter(e, myRefs.current[2]);\n                }}\n                ref={(el) => (myRefs.current[1] = el)}\n                key=\"1\"\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formSurveyLength\">\n            <Form.Label column sm={2}>\n              Survey Length\n              <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                required\n                onChange={(event) => {\n                  setMetadata((prevState) => {\n                    return { ...prevState, length: event.target.value };\n                  });\n                }}\n                onKeyPress={(e) => handleKeyEnter(e, myRefs.current[3])}\n                ref={(el) => (myRefs.current[2] = el)}\n                key=\"2\"\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group\n            as={Row}\n            className=\"mb-3\"\n            controlId=\"formSurveyDescription\"\n          >\n            <Form.Label column sm={2}>\n              Survey Description\n              <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                required\n                onChange={(event) => {\n                  setMetadata((prevState) => {\n                    return { ...prevState, description: event.target.value };\n                  });\n                }}\n                onKeyPress={(e) => handleKeyEnter(e, myRefs.current[5])}\n                ref={(el) => (myRefs.current[3] = el)}\n                key=\"3\"\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formSurveyOwner\">\n            <Form.Label column sm={2}>\n              Survey Owner\n              <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col sm={10}>\n              <span>{metadata.survey_owner}</span>\n            </Col>\n          </Form.Group>\n          <fieldset>\n            <Form.Group as={Row} className=\"mb-3\" controlId=\"formSurveyFirstQ\">\n              <Form.Label column sm={2}>\n                Survey Question 1\n              </Form.Label>\n              <Col sm={10}>\n                <FloatingLabel label=\"Question*\">\n                  <Form.Control\n                    type=\"text\"\n                    required\n                    onChange={(event) => {\n                      setQuestion1((prevState) => {\n                        return { ...prevState, question: event.target.value };\n                      });\n                    }}\n                    onKeyPress={(e) => handleKeyEnter(e, myRefs.current[6])}\n                    ref={(el) => (myRefs.current[5] = el)}\n                    key=\"5\"\n                  />\n                </FloatingLabel>\n                <FloatingLabel label=\"Suggested Response if any\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Suggested Response if any\"\n                    onChange={(event) => {\n                      setQuestion1((prevState) => {\n                        return { ...prevState, suggestion: event.target.value };\n                      });\n                    }}\n                    onKeyPress={(e) => handleKeyEnter(e, myRefs.current[7])}\n                    ref={(el) => (myRefs.current[6] = el)}\n                    key=\"6\"\n                  />\n                </FloatingLabel>\n              </Col>\n            </Form.Group>\n          </fieldset>\n          <fieldset>\n            <Form.Group as={Row} className=\"mb-3\" controlId=\"formSurveySecondQ\">\n              <Form.Label column sm={2}>\n                Survey Question 2\n              </Form.Label>\n              <Col sm={10}>\n                <FloatingLabel label=\"Question*\">\n                  <Form.Control\n                    type=\"text\"\n                    required\n                    onChange={(event) => {\n                      setQuestion2((prevState) => {\n                        return { ...prevState, question: event.target.value };\n                      });\n                    }}\n                    onKeyPress={(e) => handleKeyEnter(e, myRefs.current[8])}\n                    ref={(el) => (myRefs.current[7] = el)}\n                    key=\"7\"\n                  />\n                </FloatingLabel>\n                <FloatingLabel label=\"Suggested Response if any\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Suggested Response if any\"\n                    onChange={(event) => {\n                      setQuestion2((prevState) => {\n                        return { ...prevState, suggestion: event.target.value };\n                      });\n                    }}\n                    onKeyPress={(e) => handleKeyEnter(e, myRefs.current[9])}\n                    ref={(el) => (myRefs.current[8] = el)}\n                    key=\"8\"\n                  />\n                </FloatingLabel>\n              </Col>\n            </Form.Group>\n          </fieldset>\n          <fieldset>\n            <Form.Group as={Row} className=\"mb-3\" controlId=\"formSurveyThirdQ\">\n              <Form.Label column sm={2}>\n                Survey Question 3\n              </Form.Label>\n              <Col sm={10}>\n                <FloatingLabel label=\"Question*\">\n                  <Form.Control\n                    type=\"text\"\n                    required\n                    onChange={(event) => {\n                      setQuestion3((prevState) => {\n                        return { ...prevState, question: event.target.value };\n                      });\n                    }}\n                    onKeyPress={(e) => handleKeyEnter(e, myRefs.current[10])}\n                    ref={(el) => (myRefs.current[9] = el)}\n                    key=\"9\"\n                  />\n                </FloatingLabel>\n                <FloatingLabel label=\"Suggested Response if any\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Suggested Response if any\"\n                    onChange={(event) => {\n                      setQuestion3((prevState) => {\n                        return { ...prevState, suggestion: event.target.value };\n                      });\n                    }}\n                    onKeyPress={(e) => handleKeyEnter(e, myRefs.current[11])}\n                    ref={(el) => (myRefs.current[10] = el)}\n                    key=\"10\"\n                  />\n                </FloatingLabel>\n              </Col>\n            </Form.Group>\n          </fieldset>\n          <hr />\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formClosingDate\">\n            <Form.Label column sm={2}>\n              Closing Date\n              <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                required\n                onChange={(event) => {\n                  setMetadata((prevState) => {\n                    return { ...prevState, closing_date: event.target.value };\n                  });\n                }}\n                onKeyPress={(e) => handleKeyEnter(e, myRefs.current[12])}\n                ref={(el) => (myRefs.current[11] = el)}\n                key=\"11\"\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formTotalRewards\">\n            <Form.Label column sm={2}>\n              Total Rewards (ETH)\n              <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                required\n                onChange={(event) => {\n                  setMetadata((prevState) => {\n                    return {\n                      ...prevState,\n                      total_rewards_eth: event.target.value,\n                    };\n                  });\n                }}\n                onKeyPress={(e) => handleKeyEnter(e, myRefs.current[13])}\n                ref={(el) => (myRefs.current[12] = el)}\n                key=\"12\"\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formReward\">\n            <Form.Label column sm={2}>\n              Reward per Response (ETH)\n              <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                required\n                onChange={(event) => {\n                  setMetadata((prevState) => {\n                    return { ...prevState, reward_eth: event.target.value };\n                  });\n                }}\n                onKeyPress={(e) => (e.key === \"Enter\" ? handleSubmit() : null)}\n                ref={(el) => (myRefs.current[13] = el)}\n                key=\"13\"\n              />\n            </Col>\n          </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={handleSubmit}>\n            Submit\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport function SurveyRefundPopUp({\n  escrowAddress,\n  selectedAddress,\n  survey,\n  onShow,\n  onHide,\n  onSubmit,\n}) {\n  function handleSubmit() {\n    onHide(true);\n    onSubmit(survey.id);\n  }\n\n  return (\n    <Modal\n      show={onShow}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Refund Details\n        </Modal.Title>\n      </Modal.Header>\n      <Form>\n        <Modal.Body>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formFromAddr\">\n            <Form.Label column sm={2}>\n              Refund By\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Text muted>{escrowAddress}</Form.Text>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formSurveyId\">\n            <Form.Label column sm={2}>\n              Survey Id\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Text muted>{survey.id}</Form.Text>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formSurveyTitle\">\n            <Form.Label column sm={2}>\n              Survey Title\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Text muted>{survey.title}</Form.Text>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formToAddr\">\n            <Form.Label column sm={2}>\n              Recipient\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Text muted>{selectedAddress}</Form.Text>\n            </Col>\n          </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={handleSubmit}>\n            Withdraw Remaining\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Stack from \"react-bootstrap/Stack\";\nimport Toast from \"react-bootstrap/Toast\";\n\nimport { SurveyPopUp } from \"../components/SurveyPopUp\";\nimport { SurveyCreationPopUp } from \"../components/SurveyCreationPopUp\";\nimport { SurveyRefundPopUp } from \"../components/SurveyRefundPopUp\";\n\nexport function SurveyPage({\n  surveys,\n  escrowAddress,\n  selectedAddress,\n  network,\n  balance,\n  onCreateSurvey,\n  onTakeSurvey,\n  onRefund,\n}) {\n  // Taking Survey: identify which survey is selected\n  const [selectedValues, setSelectedValues] = useState({\n    modalShow: false,\n    data: {},\n  });\n\n  // Survey Creation: for new survey\n  const [newSurvey, setNewSurvey] = useState({\n    modalShow: false,\n    data: {},\n  });\n\n  // Closing Survey\n  const [refundValues, setRefundValues] = useState({\n    modalShow: false,\n    data: {},\n  });\n\n  // Survey List to display\n  const [surveyList, setSurveyList] = useState([]);\n\n  // to populate surveys when surveys reference changed\n  useEffect(() => {\n    setSurveyList(surveys);\n  }, [surveys]);\n\n  // Taking Survey\n  async function _takeSurvey(events) {\n    onTakeSurvey(events);\n  }\n\n  // Survey Creation:\n  // update surveylist state and refresh display of survey page\n  function _createSurvey(events) {\n    onCreateSurvey(events);\n  }\n\n  function _getRefund(events) {\n    console.log(\"Refund remaining credits to survey owner\");\n\n    onRefund(events);\n  }\n\n  return (\n    <Container>\n      <SurveyPopUp\n        address={selectedAddress}\n        survey={selectedValues.data}\n        onSubmit={_takeSurvey}\n        onShow={selectedValues.modalShow}\n        onHide={() =>\n          setSelectedValues({ ...selectedValues, modalShow: false })\n        }\n      ></SurveyPopUp>\n      <SurveyCreationPopUp\n        address={selectedAddress}\n        survey={newSurvey.data}\n        onSubmit={_createSurvey}\n        onShow={newSurvey.modalShow}\n        onHide={() => setNewSurvey({ ...newSurvey, modalShow: false })}\n      ></SurveyCreationPopUp>\n      <SurveyRefundPopUp\n        escrowAddress={escrowAddress}\n        selectedAddress={selectedAddress}\n        survey={refundValues.data}\n        onShow={refundValues.modalShow}\n        onHide={() => setRefundValues({ ...refundValues, modalShow: false })}\n        onSubmit={_getRefund}\n      ></SurveyRefundPopUp>\n      <Stack gap={4}>\n        <Card>\n          <Card.Body>\n            <Card.Text>Wallet Address: {selectedAddress}</Card.Text>\n            <Card.Text>\n              Network:{\" \"}\n              {network.name == undefined ? \"Unsupported\" : network.name}\n            </Card.Text>\n            <Card.Text>Balance: {balance}</Card.Text>\n          </Card.Body>\n        </Card>\n        <Stack direction=\"horizontal\" gap={3}>\n          <Button\n            className=\"border ms-auto\"\n            variant=\"primary\"\n            onClick={() => {\n              setNewSurvey({\n                ...newSurvey,\n                modalShow: true,\n              });\n            }}\n            // onClick={() => {\n            //   _createSurvey();\n            // }}\n          >\n            Create Survey\n          </Button>\n          <div className=\"vr\" />\n          <Button className=\"border\" variant=\"primary\" disabled>\n            Redeem Rewards (Coming Soon)\n          </Button>\n        </Stack>\n        <Stack gap={1}>\n          {surveyList.map((data) => (\n            <Card key={data.id}>\n              <Card.Body>\n                <Stack direction=\"horizontal\" gap={3}>\n                  <Card.Title>{data.title}</Card.Title>\n                  <Button\n                    className=\"border ms-auto\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                      setSelectedValues({\n                        ...selectedValues,\n                        data: data,\n                        modalShow: true,\n                      });\n                    }}\n                  >\n                    Take Survey\n                  </Button>\n                  <Button\n                    className=\"border\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                      setRefundValues({\n                        ...refundValues,\n                        data: data,\n                        modalShow: true,\n                      });\n                    }}\n                  >\n                    Withdraw Funds\n                  </Button>\n                </Stack>\n                <Stack direction=\"horizontal\" gap={3}>\n                  <Card.Subtitle>\n                    Survey Owner: {data.survey_owner}\n                  </Card.Subtitle>\n                  <div className=\"vr\" />\n                  <Card.Subtitle>\n                    Closing Date: {data.closing_date}\n                  </Card.Subtitle>\n                  <div className=\"vr\" />\n                  <Card.Subtitle className=\"text-muted\">\n                    Survey Length: {data.length}\n                  </Card.Subtitle>\n                  <Button\n                    className=\"border ms-auto\"\n                    variant=\"secondary\"\n                    disabled\n                  >\n                    Extract Responses (Coming Soon)\n                  </Button>\n                </Stack>\n                <Card.Text gap={2}>{data.description}</Card.Text>\n              </Card.Body>\n            </Card>\n          ))}\n        </Stack>\n      </Stack>\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\n\nexport function LoadingScreen({\n  isBtnDisabled = true,\n  onShow,\n  onHide,\n  message,\n}) {\n  const [hide, setHide] = useState(false);\n\n  function handleClose() {\n    setHide(true);\n    onHide(false);\n  }\n\n  return (\n    <Modal\n      show={onShow}\n      onHide={hide}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Body>\n        {isBtnDisabled && (\n          <Row className=\"justify-content-md-center\">\n            <Spinner animation=\"border\" role=\"status\"></Spinner>\n            <span className=\"text-center\">Processing...</span>\n          </Row>\n        )}\n        <Row>{message}</Row>\n      </Modal.Body>\n      <Modal.Footer className=\"justify-content-center\">\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={handleClose}\n          disabled={isBtnDisabled}\n        >\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import React from \"react\";\n\nimport { NFTStorage } from \"nft.storage\";\n\n// using ethers to interact with Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\nimport SurveyProcessorArtifact from \"./contracts/SurveyProcessor.json\";\nimport RewardEscrowArtifact from \"./contracts/RewardEscrow.json\";\n\nimport SAMPLE_SURVEYS from \"./data/sample_surveys.json\";\n\n// all the logic of the dapp contained in the Dapp component\n// all these components don't have logics, they are just presentational ones\n\nimport { Notification } from \"./components/Notification\";\nimport { ConnectWallet } from \"./components/ConnectWallet\";\nimport { NoWalletDetected } from \"./components/NoWalletDetected\";\nimport { SurveyPage } from \"./pages/SurveyPage\";\nimport { LoadingScreen } from \"./components/LoadingScreen\";\n\n// this is ropsten network id, you will need to change it when deploying to\n// other networks\nconst ROPSTEN_NETWORK_ID = \"3\";\n\nconst ETHEREUM_NETWORK = {\n  \"0x539\": \"Ganache\",\n  \"0x42\": \"Kovan\",\n};\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      loading: {\n        isBtnDisabled: true,\n        status: false,\n        message: undefined,\n      },\n      isWalletConnected: false,\n      escrowAddress: undefined,\n      selectedAddress: undefined,\n      balance: undefined,\n      network: {\n        name: undefined,\n        error: undefined,\n        showError: false,\n        showInfo: false,\n      },\n      tx: {\n        info: undefined,\n        error: undefined,\n        showError: false,\n        showInfo: false,\n      },\n      ipfs: {\n        info: undefined,\n        error: undefined,\n        showError: false,\n        showInfo: false,\n      },\n      surveys: [],\n      responses: {},\n    };\n\n    this.state = this.initialState;\n  }\n\n  // initialize ethers by creating a provider\n  _initializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\n    // instantiate Survey Processor Contract\n    this._surveyContract = new ethers.Contract(\n      process.env.REACT_APP_SURVEY_PROCESSOR_CONTRACT,\n      SurveyProcessorArtifact.abi,\n      this._provider.getSigner(0)\n    );\n\n    // instantiate Reward Escrow Contract\n    this._rewardEscrowContract = new ethers.Contract(\n      process.env.REACT_APP_REWARD_ESCROW_CONTRACT,\n      RewardEscrowArtifact.abi,\n      this._provider.getSigner(0)\n    );\n\n    this.setState({\n      escrowAddress: this._rewardEscrowContract.address,\n    });\n  }\n\n  // initialize survey data to be populated\n  _initializeData() {\n    this.setState({ surveys: SAMPLE_SURVEYS });\n  }\n\n  _initializeNFTStorageClient() {\n    this._NFTclient = new NFTStorage({\n      token: process.env.REACT_APP_NFT_STORAGE_API_KEY,\n    });\n  }\n\n  componentDidMount() {\n    this._initializeEthers();\n    this._initializeNFTStorageClient();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    // to detect metamask account change and update state\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts[0] != prevState.selectedAddress) {\n        this._getAccountBalance(accounts[0]).then((newBalance) => {\n          this.setState({\n            balance: ethers.utils.formatEther(newBalance),\n            selectedAddress: accounts[0],\n          });\n        });\n      }\n    });\n\n    // to detect metamask network change and update state\n    window.ethereum.on(\"chainChanged\", (chainId) => {\n      if (chainId != prevState.network.name) {\n        this._getMetamaskAccount().then((addr) => {\n          this._getAccountBalance(addr).then((newBalance) => {\n            this.setState({\n              balance: ethers.utils.formatEther(newBalance),\n              network: {\n                ...prevState.network,\n                name: ETHEREUM_NETWORK[chainId],\n              },\n            });\n          });\n        });\n      }\n    });\n\n    // event listeners when contract transactions are executed\n    // in ethers.js v5, when events are scanned during component load, they will get fired although no event actually happens\n    // which is why the event listeners are wrapped inside _provider.once to prevent that scenario\n    // in ethere.js v6, this issue is resolved\n    // ref: https://github.com/ethers-io/ethers.js/issues/2310\n    this._provider.once(\"block\", () => {\n      this._surveyContract.on(\n        \"LogSurveyRegistered\",\n        (surveyCreator, surveyId) => {\n          this.setState((prevState) => ({\n            ...prevState,\n            tx: {\n              info: `New Survey ID:\\n ${surveyId}\\n is registered for \\n${surveyCreator}`,\n              showInfo: true,\n            },\n          }));\n        }\n      );\n\n      this._surveyContract.on(\n        \"LogSurveyResponseSubmitted\",\n        (respondent, surveyId, totalResponses) => {\n          this.setState((prevState) => ({\n            ...prevState,\n            responses: {\n              ...prevState.responses,\n              [`${surveyId}`]: parseInt(totalResponses),\n            },\n            loading: {\n              ...prevState.loading,\n              isBtnDisabled: false,\n            },\n          }));\n        }\n      );\n\n      this._surveyContract.on(\n        \"LogSurveyResponseExists\",\n        (respondent, surveyId) => {\n          this.setState((prevState) => ({\n            ...prevState,\n            tx: {\n              info: `This address has already taken the survey`,\n              showInfo: true,\n            },\n          }));\n        }\n      );\n\n      this._rewardEscrowContract.on(\n        \"LogReturnRemainingCredit\",\n        (surveyId, recipient) => {\n          this.setState((prevState) => ({\n            ...prevState,\n            tx: {\n              info: `Remaining ETH esrowed from ${surveyId} returned to ${recipient}`,\n              showInfo: true,\n            },\n          }));\n        }\n      );\n\n      this._surveyContract.on(\"LogSurveyRemoved\", (surveyOwner, surveyId) => {\n        this.setState((prevState) => ({\n          ...prevState,\n          tx: {\n            info: `Survey with ID: ${surveyId} owned by ${surveyOwner} is removed`,\n            showInfo: true,\n          },\n          loading: {\n            status: false,\n            message: \"\",\n          },\n        }));\n      });\n    });\n  }\n\n  render() {\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    return (\n      <div className=\"container p-4\">\n        {!this.state.isWalletConnected && (\n          <div className=\"container vertical-center\">\n            <h2 className=\"text-white text-center\">\n              <strong>Survey DApp</strong>\n            </h2>\n            <p className=\"text-white text-center\">\n              Get ETH for answering surveys\n            </p>\n            <ConnectWallet connectWallet={() => this._connectWallet()} />\n          </div>\n        )}\n        {this.state.isWalletConnected && (\n          <SurveyPage\n            {...this.state}\n            onCreateSurvey={(data) => this._registerSurvey(data)}\n            onTakeSurvey={(data) => this._takeSurvey(data)}\n            onRefund={(data) => this._refundCredits(data)}\n          />\n        )}\n        {this.state.tx.showError && (\n          <Notification\n            isError={true}\n            messageObj={this.state.tx.error}\n            show={this.state.tx.showError}\n            onHide={(data) => this._closeTxError(data)}\n          />\n        )}\n        {this.state.network.showError && (\n          <Notification\n            isError={true}\n            messageObj={this.state.network.error}\n            show={this.state.network.showError}\n            onHide={(data) => this._closeNetworkError(data)}\n          />\n        )}\n        {this.state.network.showInfo && (\n          <Notification\n            isError={false}\n            messageObj={this.state.network.info}\n            show={this.state.network.showInfo}\n            onHide={(data) => this._closeInfo(data)}\n          />\n        )}\n        {this.state.tx.showInfo && (\n          <Notification\n            isError={false}\n            messageObj={this.state.tx.info}\n            show={this.state.tx.showInfo}\n            onHide={(data) => this._closeInfo(data)}\n          />\n        )}\n        {this.state.loading.status && (\n          <LoadingScreen\n            onShow={this.state.loading.status}\n            isBtnDisabled={this.state.loading.isBtnDisabled}\n            onHide={(data) => this._loadingCloseHandler(data)}\n            message={this.state.loading.message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  async _getMetamaskAccount() {\n    const accounts = await this._provider.send(\"eth_requestAccounts\");\n    return accounts[0];\n  }\n\n  async _getNetworkConnected() {\n    return this._provider.send(\"eth_chainId\");\n  }\n\n  async _getAccountBalance(account) {\n    return this._provider.getBalance(account);\n  }\n\n  // when a user clicks \"Connect Wallet\", this method is executed\n  // it connects the dapp to the user's wallet\n  // retrieves wallet's address, balance and the network it is connected to\n  async _connectWallet() {\n    try {\n      const account = await this._getMetamaskAccount();\n      const chainId = await this._getNetworkConnected();\n\n      // retrieve the balance of the wallet\n      const balance = await this._getAccountBalance(account);\n\n      // change in state will re-render UI\n      this.setState({\n        selectedAddress: account,\n        isWalletConnected: true,\n        network: {\n          name: ETHEREUM_NETWORK[chainId],\n        },\n        balance: ethers.utils.formatEther(balance), // format from WEI to ETH\n      });\n    } catch (err) {\n      this.setState((prevState) => ({\n        ...prevState,\n        network: {\n          error: err,\n          showError: true,\n        },\n      }));\n    }\n  }\n\n  // callback function when Create Survey button is clicked\n  async _registerSurvey(newSurvey) {\n    const decimalPlaces = 18;\n    try {\n      // override parameters in contract call, sending ETH to payable function\n\n      const overrides = {\n        value: ethers.utils.parseEther(newSurvey.total_rewards_eth),\n      };\n\n      // contract method call\n      const transaction = await this._surveyContract.registerSurvey(\n        newSurvey.id,\n        ethers.utils.parseUnits(newSurvey.total_rewards_eth, decimalPlaces),\n        ethers.utils.parseUnits(newSurvey.reward_eth, decimalPlaces),\n        newSurvey.closing_date,\n        overrides\n      );\n\n      // using .wait() to wait for the transaction to be mined.\n      const receipt = await transaction.wait();\n\n      const latestBalance = await this._getAccountBalance(\n        this.state.selectedAddress\n      );\n\n      // status flag = 1 means successful transaction, update list of surveys on display\n      if (receipt.status) {\n        this.setState((prevState) => ({\n          ...prevState, // copy all other fields\n          balance: ethers.utils.formatEther(latestBalance),\n          loading: {\n            status: false,\n          },\n          surveys: [\n            ...prevState.surveys, // recreate the array that contains surveys\n            newSurvey, // add the new survey to the array\n          ],\n        }));\n      }\n    } catch (error) {\n      const latestBalance = await this._getAccountBalance(\n        this.state.selectedAddress\n      );\n      this.setState((prevState) => ({\n        ...prevState,\n        loading: {\n          status: false,\n        },\n        balance: ethers.utils.formatEther(latestBalance),\n        tx: {\n          error: error,\n          showError: true,\n        },\n      }));\n    }\n  }\n\n  // callback function when Take Survey is clicked\n  async _takeSurvey(surveyResponse) {\n    try {\n      // store survey response metadata and survey response in ipfs\n\n      this.setState((prevState) => ({\n        ...prevState,\n        loading: {\n          status: true,\n          message: \"\",\n        },\n      }));\n\n      const metadataUrl = await this._store(surveyResponse);\n\n      const transaction = await this._surveyContract.answerSurvey(\n        surveyResponse.id,\n        metadataUrl\n      );\n\n      const receipt = await transaction.wait();\n\n      const latestBalance = await this._getAccountBalance(\n        this.state.selectedAddress\n      );\n\n      if (receipt.status) {\n        this.setState((prevState) => ({\n          ...prevState,\n          balance: ethers.utils.formatEther(latestBalance),\n          ipfs: {\n            showInfo: true,\n            info: `Uploaded to IPFS. Metadata URL:\\n ${metadataUrl}`,\n          },\n          loading: {\n            status: true,\n            message: `Uploaded to IPFS. Metadata URL:\\n ${metadataUrl}`,\n          },\n        }));\n      }\n    } catch (error) {\n      // need to catch error and if survey is already answered by user\n\n      const latestBalance = await this._getAccountBalance(\n        this.state.selectedAddress\n      );\n\n      this.setState((prevState) => ({\n        ...prevState,\n        balance: ethers.utils.formatEther(latestBalance),\n        tx: {\n          error: error,\n          showError: true,\n        },\n        loading: {\n          status: false,\n        },\n      }));\n    }\n  }\n\n  // callback function remaining amount is returned to survey owner\n  // when survey is closed\n  async _refundCredits(surveyId) {\n    try {\n      // contract method call\n      const transaction = await this._surveyContract.refundOnSurveyClosed(\n        surveyId\n      );\n\n      this.setState((prevState) => ({\n        ...prevState,\n        loading: {\n          status: true,\n          message: \"\",\n        },\n      }));\n\n      const receipt = await transaction.wait();\n\n      const latestBalance = await this._getAccountBalance(\n        this.state.selectedAddress\n      );\n\n      if (receipt.status) {\n        this.setState((prevState) => ({\n          ...prevState,\n          loading: {\n            status: false,\n          },\n          balance: ethers.utils.formatEther(latestBalance),\n          surveys: prevState.surveys.filter((each) => each.id != surveyId),\n        }));\n      }\n    } catch (error) {\n      const latestBalance = await this._getAccountBalance(\n        this.state.selectedAddress\n      );\n\n      this.setState((prevState) => ({\n        ...prevState,\n        balance: ethers.utils.formatEther(latestBalance),\n        loading: {\n          status: false,\n        },\n        tx: {\n          error: error,\n          showError: true,\n        },\n      }));\n    }\n  }\n\n  // Taking Survey:\n  // using NFT Storage client to store survey response and metadata object of the survey response text on IPFS\n  // Note that storing survey responses on IPFS is not a good architectual design (need response data to be private), but\n  // to complete the E2E user flow\n  async _store(data) {\n    try {\n      const fileCid = await this._NFTclient.storeBlob(\n        new Blob([JSON.stringify(data.responses)])\n      );\n      const fileUrl = (await \"https://ipfs.io/ipfs/\") + fileCid;\n\n      const obj = {\n        id: data.id,\n        title: data.title + \" metadata\",\n        type: \"text\",\n        survey_taker: data.survey_taker,\n        file_url: fileUrl,\n      };\n\n      const metadata = new Blob([JSON.stringify(obj)], {\n        type: \"application/json\",\n      });\n      const metadataCid = await this._NFTclient.storeBlob(metadata);\n      const metadataUrl = \"https://ipfs.io/ipfs/\" + metadataCid;\n      return metadataUrl;\n    } catch (error) {\n      this.setState((prevState) => ({\n        ...prevState,\n        ipfs: {\n          error: error,\n          showError: true,\n        },\n      }));\n    }\n  }\n\n  async _loadingCloseHandler(onShow) {\n    if (!onShow) {\n      this.setState((prevState) => ({\n        ...prevState,\n        loading: { status: false },\n      }));\n    }\n  }\n\n  async _closeTxError(onClose) {\n    if (onClose) {\n      this.setState((prevState) => ({\n        ...prevState,\n        tx: {\n          showError: false,\n        },\n      }));\n    }\n  }\n\n  async _closeInfo(onClose) {\n    if (onClose) {\n      this.setState((prevState) => ({\n        ...prevState,\n        tx: {\n          ...prevState.tx,\n          showInfo: false,\n        },\n        network: {\n          ...prevState.network,\n          showInfo: false,\n        },\n        ipfs: {\n          ...prevState.ipfs,\n          showInfo: false,\n        },\n      }));\n    }\n  }\n\n  async _closeNetworkError(onClose) {\n    if (onClose) {\n      this.setState((prevState) => ({\n        ...prevState,\n        network: {\n          showError: false,\n        },\n      }));\n    }\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // check if metamask selected network is localhost:7545\n  // _checkNetwork() {\n  //   if (window.ethereum.networkVersion === ROPSTEN_NETWORK_ID) {\n  //     return true;\n  //   }\n\n  //   this.setState((prevState) => ({\n  //     ...prevState,\n  //     network: {\n  //       error: \"Please connect Metamask to Ropsten Network\",\n  //       showError: true,\n  //     },\n  //   }));\n  // }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Dapp } from \"./Dapp\";\nimport \"./styles/Dapp.css\";\n\n// bootstrap framework for styling\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dapp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}